contract = { soi ~ (state_var_decl)* ~ (function_def)* ~ eoi }

function_def = { "define" ~ recursive? ~ identifier ~ type_list ~ "->" ~ logikon_type ~ (case)+ }

type_list = { "(" ~ (logikon_type)* ~ ")" }

recursive = @ { "recursive" }

case = { "case" ~ parameter_list ~ return_value ~ case_body? ~ "." }

return_value = { identifier | "_" }

parameter_list = { "(" ~ (array_param | uint_param | list_param)* ~ ")" }

list_param = @ { "[" ~ list_head_param ~ list_tail_param? ~ "]" }

list_tail_param = @ { ":" ~ ((identifier ~ "*") | "_") }

list_head_param = @ { uint_param | "_" }

array_param = @ { "{" ~ uint_param ~ "}" }

uint_param = @ { identifier  | number }

statement = $ { "(" ~ (ternary_op | unary_op | binary_op | function_identifier ) ~ (" " ~ argument)* ~ ")" }

argument = { statement | number | identifier }

unary_op = @ { "prove" | "not" }

binary_op = @ { "==" | "!==" | "=" | "!=" | "<=" | "<" | ">=" | ">" | "and" | "or" | "+" | "-" | "*" | "/" | "select" | "update" }

ternary_op = @ { "store" | "ite" }

function_identifier = @ { identifier }

case_body = { ":-" ~ (statement)+ }

return_var = @ { identifier? }

state_var_decl = { "declare" ~ identifier ~ logikon_type ~ "."}

logikon_type = @ { "Bool" | "Uint" | "Array" | "List" }

identifier = @ { alpha ~ (alpha | digit)* }

number = @ { (digit)+ }

alpha = _ { 'a'..'z' | 'A'..'Z' }
digit = _ { '0'..'9' }

whitespace = _ { " " | "\t" | "\n" }
